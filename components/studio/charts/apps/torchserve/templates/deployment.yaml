apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.release }}
  namespace: {{ .Values.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      release: {{ $.Release.Name }}
      app: pytorch-serve
      project: {{ $.Values.project.slug }}
      type: app
      pod: pytorch-serve
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8501"
      labels:
        release: {{ $.Release.Name }}
        app: pytorch-serve
        project: {{ $.Values.project.slug }}
        type: app
        pod: pytorch-serve
    spec:
      volumes:
      - name: torch-conf
        configMap:
          name: {{ .Release.Name }}-torch-conf
      - name: rp-conf
        configMap:
          name: {{ .Release.Name }}-rp-config
      {{- range $key, $value := .Values.apps.volume }}
      - name: {{ $key }}
        persistentVolumeClaim:
          claimName: {{ $value.release }}
      {{- end }}
      {{ if .Values.model_card.enabled }}
      - name: mc-conf
        configMap:
          name: {{ .Release.Name }}-mc-config
      {{ end }}
      - name: gatekeeper-config
        configMap:
          name: {{ .Release.Name }}-gatekeeper-config
      - name: model-vol
        emptyDir: {}
      containers:
      - name: gatekeeper
        image: {{ .Values.gatekeeper.image }}
        imagePullPolicy: Always
        args:
          - --config=/etc/secrets/gatekeeper.yaml
        ports:
          - containerPort: {{ .Values.gatekeeper.port }}
        volumeMounts:
        - name: gatekeeper-config
          mountPath: /etc/secrets/
      - name: reverse-proxy
        image: nginx:alpine
        imagePullPolicy: Always
        volumeMounts:
        - name: rp-conf
          mountPath: /etc/nginx

      {{ if .Values.model_card.enabled }}
      - name: model-card
        image: nginx:alpine
        imagePullPolicy: Always
        volumeMounts:
        - name: model-vol
          mountPath: /models
        - name: mc-conf
          mountPath: /etc/nginx
      {{ end }}
      - name: serve
        image: {{ .Values.deployment.image }}
        workingDir: /home/model-server
        # command: ['/bin/bash']
        # args: ['-c', 'torchserve', '--start', '--models', {{ .Values.modelstore.models }}]
        env:
        # - name: TEMP
        #   value: /home/tmp
        - name: MODEL_STORE
          value: {{ .Values.modelstore.path }}
        resources:
          limits:
            cpu: {{ .Values.flavor.limits.cpu }}
            memory: {{ .Values.flavor.limits.memory }}
          requests:
            cpu: {{ .Values.flavor.requests.cpu }}
            memory: {{ .Values.flavor.requests.memory }}
        volumeMounts:
        # - name: torch-conf
        #   mountPath: /home/model-server/
        {{- range $key, $value := .Values.apps.volume }}
        - name: {{ $key }}
          mountPath: /home/model-server/model-store/
        {{- end }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.deployment.port }}