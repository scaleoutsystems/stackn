{{ if .Values.backup.schedule }}
apiVersion: batch/v1beta1
kind: CronJob
{{ else }}
apiVersion: batch/v1
kind: Job
{{ end }}
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Values.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    release: {{ .Release.Name }}
    app: backup-job
    project: {{ .Values.project.slug }}
    type: app
    pod: backup-job
spec:
{{ if .Values.backup.schedule }}
  schedule: "{{ .Values.backup.schedule }}"
  jobTemplate:
    spec:
{{ end }}
      backoffLimit: 2
      template:
        metadata:
          labels:
            release: {{ .Release.Name }}
            app: backup-job
            project: {{ .Values.project.slug }}
            type: app
            pod: backup-job
        spec:
          restartPolicy: OnFailure
          initContainers:
          - name: create-archive
            image: busybox
            command: ["/bin/sh", "-c"]
            args:
            - cd volume;
              tar czvf /backup-vol/backup.tar.gz .
            volumeMounts:
            - name: backup-vol
              mountPath: /backup-vol
            {{- range $key, $value := .Values.apps.volume }}
            - name: {{ $key }}
              mountPath: /volume
            {{- end }}
          containers:
          - name: copy-archive
            image: minio/mc
            command: ["/bin/bash", "-c"]
            args:
            - mc config host add min $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY;
              mc mb min/$S3_BUCKET || echo 'Bucket already exists';
            {{- range $key, $value := .Values.apps.volume }}
              timestamp=$(date +%s);
              mc cp /backup-vol/backup.tar.gz min/$S3_BUCKET/{{ $key }}-$timestamp.tar.gz;
            {{- end }}
            env:
            - name: S3_ENDPOINT
              value: https://{{ .Values.s3.host }}
            - name: S3_ACCESS_KEY_ID
              value: {{ .Values.s3.access_key }}
            - name: S3_SECRET_ACCESS_KEY
              value: {{ .Values.s3.secret_key }}
            - name: S3_BUCKET
              value: {{ .Values.backup.bucket }}
            volumeMounts:
            - name: backup-vol
              mountPath: /backup-vol
            imagePullPolicy: Always  
            resources:
              limits:
                cpu: {{ .Values.resources.limits.cpu }}
                memory: {{ .Values.resources.limits.memory }}
              requests:
                cpu: {{ .Values.resources.requests.cpu }}
                memory: {{ .Values.resources.requests.memory }}
          volumes:
          {{- range $key, $value := .Values.apps.volume }}
          - name: {{ $key }}
            persistentVolumeClaim:
              claimName: {{ $value.release }}
          {{- end }}
          - name: backup-vol
            emptyDir: {}
