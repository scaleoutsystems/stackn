name: Integration test
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-20.04
    env:
      working-directory: ./components/studio
    name: Integration test
    steps:
    - uses: actions/checkout@v2
    - uses: balchua/microk8s-actions@v0.2.1
      with:
        channel: '1.20/stable'
        addons: '["dns", "rbac", "storage", "ingress"]'
    - name: Check k8s
      id: myactions
      run: |
        echo "Checking k8s cluster"
        kubectl get no
        kubectl get pods -A -o wide
    - name: start studio
      working-directory: ${{env.working-directory}}
      id: setup
      run: |
        set -ex
        echo "Running init script"
        ./init.sh
        echo "Deploying studio"
        docker-compose up -d
    - name: install CLI
      working-directory: ./cli
      id: cli
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir .
    - name: login studio
      working-directory: ${{env.working-directory}}
      id: login
      run: |
        ADMIN_PASSWORD=`awk -F '=' '/DJANGO_SUPERUSER_PASSWORD/{print $NF}' docker-compose.yml`
        STUDIO_URL=`awk -F '= ' -v replace="'" '/STUDIO_URL/{gsub(replace, "", $NF); print $NF}' studio/settings.py`
        response=$(curl --write-out '%{http_code}' --silent --output /dev/null $STUDIO_URL)
        if [[ "$response" -ne 200 ]] ; then sleep 30; else stackn login -u admin -p $ADMIN_PASSWORD --url $STUDIO_URL; fi
    - name: create project default
      id: project
      run: |
        stackn create project -t default test
        stackn get projects
        sleep 20
        docker logs celery-worker --tail 100
        kubectl get po 
    - name: exec in lab
      id: lab
      run: |
        POD_NAME=`kubectl get po -l app=lab --no-headers -o custom-columns=":metadata.name"`
        echo $POD_NAME
        kubectl wait --for=condition=Ready pod/$POD_NAME
        kubectl cp ./examples $POD_NAME:./examples
        kubectl exec $POD_NAME -- ./examples/tensorflow-serve/mnist-keras/run.sh
    - name: check models
      id: models
      run: stackn get model-obj

